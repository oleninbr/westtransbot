import os
import telebot
import requests
from dotenv import load_dotenv
from telebot import types

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_MAPS_API_KEY = os.getenv('GOOGLE_MAPS_API_KEY')

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

def get_location_name(lat, lon, api_key):
    url = "https://maps.googleapis.com/maps/api/geocode/json"
    params = {
        'latlng': f"{lat},{lon}",
        'key': api_key,
        'language': 'uk'
    }
    response = requests.get(url, params=params)
    result = response.json()
    if result['status'] == 'OK':
        return result['results'][0].get('formatted_address', f"{lat:.5f}, {lon:.5f}")
    return f"{lat:.5f}, {lon:.5f}"

def search_truck_repair_shops(lat, lon, radius=50000):
    url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json"
    params = {
    'location': f'{lat},{lon}',
    'radius': radius,
    'type': 'car_repair',
    'keyword': '–≤–∞–Ω—Ç–∞–∂—ñ–≤–∫–∞ TIR truck',
    'key': GOOGLE_MAPS_API_KEY,
    'language': 'uk, en'
}

    response = requests.get(url, params=params)
    print("Places API result:", response.json())  # –î–ª—è –¥–µ–±–∞–≥—É
    return response.json()

def format_repair_shops_message(results, user_lat, user_lon):
    import urllib.parse
    place_name = get_location_name(user_lat, user_lon, GOOGLE_MAPS_API_KEY)
    if not results.get('results'):
        return f"–ù–∞ –∂–∞–ª—å, –°–¢–û –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–∞–¥—ñ—É—Å—ñ 50 –∫–º –ø–æ–±–ª–∏–∑—É {place_name} üòî"
    message = f"üìç –ú—ñ—Å—Ü–µ –ø–æ–ª–æ–º–∫–∏: {place_name}\n"
    message += "–ù–∞–π–±–ª–∏–∂—á—ñ –°–¢–û:\n\n"
    for place in results['results'][:10]:
        name = place.get('name', '–ù–µ–≤—ñ–¥–æ–º–µ –°–¢–û')
        address = place.get('vicinity', '–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞')
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø–æ –Ω–∞–∑–≤—ñ
        name_query = urllib.parse.quote_plus(name)
        maps_url = f"https://www.google.com/maps/search/?api=1&query={name_query}"
        message += f"üèÅ {name}\n"
        message += f"üìç {address}\n"
        message += f"üåê [–ö–∞—Ä—Ç–∞: {name}]({maps_url})\n\n"
    return message




@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    location_btn = types.KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)
    manual_btn = types.KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∫—Ä–∞—ó–Ω—É —Ç–∞ —ñ–Ω–¥–µ–∫—Å")
    markup.add(location_btn)
    markup.add(manual_btn)
    bot.reply_to(
        message,
        "–ü—Ä–∏–≤—ñ—Ç! üöõ –Ø –¥–æ–ø–æ–º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—ñ –°–¢–û.\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ —Å–ø–æ—Å–æ–±—ñ–≤:\n"
        "üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é - –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è\n"
        "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∫—Ä–∞—ó–Ω—É —Ç–∞ —ñ–Ω–¥–µ–∫—Å - –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è",
        reply_markup=markup
    )

@bot.message_handler(content_types=['location'])
def handle_location(message):
    lat = message.location.latitude
    lon = message.location.longitude
    results = search_truck_repair_shops(lat, lon)
    formatted_message = format_repair_shops_message(results, lat, lon)
    bot.send_message(
        message.chat.id,
        formatted_message,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )

@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∫—Ä–∞—ó–Ω—É —Ç–∞ —ñ–Ω–¥–µ–∫—Å")
def ask_manual_location(message):
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –ö—Ä–∞—ó–Ω–∞, –ú—ñ—Å—Ç–æ, –ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –£–∫—Ä–∞—ó–Ω–∞, –†—ñ–≤–Ω–µ, 33000"
    )
    bot.register_next_step_handler(message, process_manual_location)

def process_manual_location(message):
    address = message.text
    geocode_url = "https://maps.googleapis.com/maps/api/geocode/json"
    params = {
        'address': address,
        'key': GOOGLE_MAPS_API_KEY
    }
    response = requests.get(geocode_url, params=params)
    geocode_result = response.json()
    if geocode_result['status'] == 'OK':
        location = geocode_result['results'][0]['geometry']['location']
        lat = location['lat']
        lon = location['lng']
        results = search_truck_repair_shops(lat, lon)
        formatted_message = format_repair_shops_message(results, lat, lon)
        bot.send_message(
            message.chat.id,
            formatted_message,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∫–∞–∑–∞–Ω—É –∞–¥—Ä–µ—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é."
        )

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
üöõ **–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É –°–¢–û**

**–ö–æ–º–∞–Ω–¥–∏:**
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É

**–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**
1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É
2Ô∏è‚É£ –ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∫—Ä–∞—ó–Ω—É —Ç–∞ —ñ–Ω–¥–µ–∫—Å" –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è

–ë–æ—Ç –∑–Ω–∞–π–¥–µ –Ω–∞–π–±–ª–∏–∂—á—ñ –°–¢–û –≤ —Ä–∞–¥—ñ—É—Å—ñ 50 –∫–º –≤—ñ–¥ –≤–∞—à–æ–≥–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è.

‚ùì –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.
    """
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

if __name__ == '__main__':
    print("üöõ –ë–æ—Ç –°–¢–û –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.infinity_polling()
